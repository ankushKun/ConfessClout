{"version":3,"sources":["components/footer.js","components/header.js","components/login.js","App.js","index.js"],"names":["Footer","href","target","rel","Header","pubKey","set","login","identityWindow","window","open","postMessage","e","init","this","iframe","contentWindow","pendingRequests","push","addEventListener","message","data","method","id","payload","document","getElementById","t","n","service","respond","source","handleInit","close","publicKeyAdded","handleLogin","App","useState","publicKey","setPublicKey","confession","setConfession","postUrl","setPostUrl","count","setCount","useEffect","axios","post","then","console","log","handleSubmit","event","a","preventDefault","res","status","basename","className","style","fontSize","onClick","onSubmit","name","cols","rows","maxWidth","maxHeight","minLength","required","placeholder","onChange","value","disabled","type","backgroundColor","color","location","reload","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a9e2511e.chunk.js","sourcesContent":["export default function Footer() {\n    return (<div>\n        <h2>WTH is ConfessClout?</h2>\n        <p>\n            Often on many Discord servers I have found a channel in which users were able to send confessions anonymously\n            <br /><i>(any sort of message that one would not like to say publicly...kinda)</i><br /><br />\n            That means without disclosing the identity of the person who sent that message. <br />\n            All this was done through the use of bots, the user would DM the bot <br /> and the bot would send the message in\n            its specific channel on the server.\n            <br /><br />\n            Sounds fun right? <br />\n            In a server that I manage on Discord, we have our own custom confession bot, <br />\n            and it's really nice seeing people sharing their thoughts (both good and bad).\n            <br /><br />\n            Many people are unable to release their thoughts and vent somewhere when needed, and end up keeping things to\n            themselves, which has a negative effect on them :(\n            <br /><br /><br />\n            We have a saying in our language\n        </p>\n        <h3><q>‡§Ö‡§™‡§®‡•á ‡§Æ‡§® ‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§¶‡•Ç‡§∏‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§¨‡§§‡§æ‡§®‡•á ‡§∏‡•á ‡§Æ‡§® ‡§π‡§≤‡•ç‡§ï‡§æ ‡§∞‡§π‡§§‡§æ ‡§π‡•à‡•§</q></h3>\n        <p>\n            Which basically means you feel much better after expressing yourself to others :)\n        </p>\n        <h2>How does it work?</h2>\n        <p>All you need to do is Login with your deso account, type in your confession, hit send and your confession will be\n            posted on <a href=\"https://bitclout.com/u/ConfessClout\" target=\"_blank\" rel=\"noreferrer\">@ConfessClout</a> üöÄ</p>\n        <p>The login is there to make sure only the people who are on DeSo can send confessions.</p>\n        <p>Your public key or account details will never be stored or associated with any confession you make.</p>\n    </div>);\n}","\nexport default function Header() {\n    return (<h1>üíé <a href=\"/\"> CLOUT CONFESSIONS </a>üíé</h1>);\n}","\nconst identityEndpoint = \"https://identity.deso.org\";\nvar pubKey;\nvar set;\n\nfunction setPublicKeySetter(f) {\n    set = f;\n}\n\nfunction login() {\n    identityWindow = window.open(\n        `${identityEndpoint}/log-in?accessLevelRequest=2`,\n        null,\n        \"toolbar=no, width=800, height=1000, top=0, left=0\"\n    );\n}\n\nfunction handleInit(e) {\n    if (!init) {\n        init = true;\n        iframe = document.getElementById(\"identity\");\n\n        for (const e of pendingRequests) {\n            postMessage(e);\n        }\n\n        pendingRequests = [];\n    }\n    respond(e.source, e.data.id, {});\n}\n\nfunction handleLogin(payload) {\n    // console.log(payload);\n    if (identityWindow) {\n        identityWindow.close();\n        identityWindow = null;\n        pubKey = payload.publicKeyAdded;\n        set(pubKey);\n    }\n\n\n}\n\nfunction respond(e, t, n) {\n    e.postMessage(\n        {\n            id: t,\n            service: \"identity\",\n            payload: n,\n        },\n        \"*\"\n    );\n}\n\nfunction postMessage(e) {\n    init\n        ? this.iframe.contentWindow.postMessage(e, \"*\")\n        : pendingRequests.push(e);\n}\n\n// const childWindow = document.getElementById('identity').contentWindow;\nwindow.addEventListener(\"message\", (message) => {\n    // console.log(\"message: \");\n    // console.log(message);\n\n    const {\n        // eslint-disable-next-line\n        data: { id, method, payload },\n    } = message;\n\n    // console.log(id);\n    // console.log(method);\n    // console.log(payload);\n\n    if (method === \"initialize\") {\n        handleInit(message);\n    } else if (method === \"login\") {\n        handleLogin(payload);\n    }\n});\n\n// eslint-disable-next-line\nvar init = false;\n// eslint-disable-next-line\nvar iframe = null;\n// eslint-disable-next-line\nvar pendingRequests = [];\n// eslint-disable-next-line\nvar identityWindow = null;\n\nexport {\n    setPublicKeySetter, login\n}\n// module.exports = { setPublicKeySetter: setPublicKeySetter, login: login }","import { useState, useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nimport './App.css';\n\nimport Footer from './components/footer';\nimport Header from './components/header';\nimport { setPublicKeySetter, login } from './components/login';\n\nfunction App() {\n  const [publicKey, setPublicKey] = useState(null);\n  const [confession, setConfession] = useState(null);\n  const [postUrl, setPostUrl] = useState(null);\n  const [count, setCount] = useState(null);\n  setPublicKeySetter(setPublicKey);\n  useEffect(() => {\n    if (publicKey) {\n      axios.post(\"/setPublicKey\", { publicKey: publicKey }).then(console.log(\"publicKey sent to backend\"));\n    }\n  }, [publicKey]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (confession) {\n      const res = await axios.post(\"/postConfession\", { confession: confession, publicKey: publicKey })\n        .then((res) => {\n          if (res.status === 200) { return res.data }\n        });\n      setCount(res.count);\n      setPostUrl(res.postUrl);\n\n\n    }\n  }\n\n  return (<BrowserRouter basename=\"/\">\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header />\n        {postUrl == null && count == null ? <>\n\n          {\n            publicKey ?\n              <p style={{ fontSize: \"small\" }}>You are {publicKey}</p> :\n              <><button className=\"button\" onClick={login}>Login with DESO to post confessions</button><br /></>\n          }\n\n          <form className=\"confessionForm\" onSubmit={handleSubmit}>\n            <textarea id=\"confession\" name=\"confession\" cols=\"100\" rows=\"20\" style={{ maxWidth: \"80vw\", maxHeight: \"50vh\" }}\n              minLength=\"10\" required placeholder=\"Write confession here ;)\" onChange={(e) => { setConfession(e.target.value) }}\n              disabled={publicKey ? false : true}></textarea >\n            <br />\n            <input type=\"submit\" value=\"SEND\" className=\"button\" disabled={publicKey ? false : true} style={publicKey ? {} : { backgroundColor: 'grey', color: 'black' }} />\n          </form >\n          <Footer />\n        </> : <>\n          <h2>Your confession was sent :)</h2>\n          <h4>Confession #{count}</h4>\n          <a href={postUrl} target=\"_blank\" rel=\"noreferrer\"><button className=\"button\">view confession</button></a>\n          <br />\n          <button className=\"button\" onClick={() => { window.location.reload() }}>go back</button>\n        </>\n        }\n      </header>\n    </div ></BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}